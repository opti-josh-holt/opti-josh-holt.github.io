{"version":3,"sources":["reportWebVitals.js","components/InputSettings.js","components/DecisionResults.js","components/AppLayout.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InputSettings","styled","MuiInput","setInputSettings","useState","sdkKey","setSdkKey","flagKey","setFlagKey","numUsers","setNumUsers","eventKey","setEventKey","Box","component","sx","m","width","noValidate","autoComplete","TextField","id","label","required","value","onInput","e","target","Button","variant","onClick","DecisionResults","inputSettings","console","log","optimizelyClient","createInstance","isClientValid","getOptimizelyConfig","donePromise","Promise","resolve","setTimeout","onReady","isValidInstance","projectId","isDone","setIsDone","isClientReady","setIsClientReady","datafile","JSON","parse","getDatafile","decisions","stringify","userIds","length","push","map","userId","attributes","country","Math","round","random","randomNumber","decision","createUserContext","decide","Item","Paper","theme","typography","body2","padding","spacing","textAlign","color","palette","text","secondary","AppLayout","props","Fragment","CssBaseline","flexGrow","height","AppBar","position","Toolbar","Typography","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89d6d4c5.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useState } from 'react';\r\n\r\nimport {\r\n  TextField,\r\n  Box,\r\n  Slider,\r\n  Typography,\r\n  Grid,\r\n  Button,\r\n} from '@mui/material';\r\nimport MuiInput from '@mui/material/Input';\r\nimport { styled } from '@mui/material/styles';\r\n/*\r\n TO DOs\r\n- Update Flag key be a dropdown (Select in mui) that pulls once SDK key is entered\r\n*/\r\n\r\nconst Input = styled(MuiInput)`\r\n  width: 42px;\r\n`;\r\n\r\nconst InputSettings = ({ setInputSettings }) => {\r\n  // Handle form values\r\n  const [sdkKey, setSdkKey] = useState('9rgh3WiYAPcvfoFcRYQnk');\r\n  const [flagKey, setFlagKey] = useState('mab_flag');\r\n  const [numUsers, setNumUsers] = useState(5);\r\n  const [eventKey, setEventKey] = useState('');\r\n\r\n  const [value, setValue] = useState(30);\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    if (value < 0) {\r\n      setValue(0);\r\n    } else if (value > 100) {\r\n      setValue(100);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const formValues = {\r\n      sdkKey: sdkKey === '' ? null : sdkKey,\r\n      flagKey: flagKey === '' ? null : flagKey,\r\n      numUsers: numUsers === '' ? null : numUsers,\r\n      eventKey: eventKey === '' ? null : eventKey,\r\n    };\r\n    setInputSettings(formValues);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      component='form'\r\n      sx={{\r\n        '& > :not(style)': { m: 1, width: '25ch' },\r\n      }}\r\n      noValidate\r\n      autoComplete='off'\r\n    >\r\n      <TextField\r\n        id='sdk-key-input'\r\n        label='SDK key'\r\n        required\r\n        value={sdkKey}\r\n        onInput={(e) => setSdkKey(e.target.value)}\r\n      />\r\n      <TextField\r\n        id='flag-key-input'\r\n        label='Flag key'\r\n        required\r\n        value={flagKey}\r\n        onInput={(e) => setFlagKey(e.target.value)}\r\n      />\r\n      <TextField\r\n        id='flag-key-input'\r\n        label='Users to fake (#)'\r\n        required\r\n        value={numUsers}\r\n        onInput={(e) => setNumUsers(e.target.value)}\r\n      />\r\n      <TextField\r\n        id='event-key-input'\r\n        label='Event to mock'\r\n        value={eventKey}\r\n        onInput={(e) => setEventKey(e.target.value)}\r\n      />\r\n      <Button variant='contained' onClick={() => handleSubmit()}>\r\n        Run\r\n      </Button>\r\n      {/* \r\n      <Box sx={{ width: 250 }}>\r\n        <Typography id='input-slider' gutterBottom>\r\n          Users to convert (%)\r\n        </Typography>\r\n        <Grid container spacing={2} alignItems='center'>\r\n          <Grid item xs>\r\n            <Slider\r\n              value={typeof value === 'number' ? value : 0}\r\n              onChange={handleSliderChange}\r\n              aria-labelledby='input-slider'\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Input\r\n              value={value}\r\n              size='small'\r\n              onChange={handleInputChange}\r\n              onBlur={handleBlur}\r\n              inputProps={{\r\n                step: 10,\r\n                min: 0,\r\n                max: 100,\r\n                type: 'number',\r\n                'aria-labelledby': 'input-slider',\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Box> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InputSettings;\r\n","import React, { useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n// Javascript sdk\r\nimport { createInstance } from '@optimizely/optimizely-sdk';\r\n// React sdk\r\nimport {\r\n  //createInstance,\r\n  OptimizelyProvider,\r\n  useDecision,\r\n} from '@optimizely/react-sdk';\r\n// mui\r\nimport { Typography } from '@mui/material';\r\n// charts\r\nimport { PieChart } from 'recharts';\r\n\r\nconst DecisionResults = ({ inputSettings }) => {\r\n  const { sdkKey, flagKey, numUsers } = inputSettings;\r\n\r\n  console.log(sdkKey);\r\n  const optimizelyClient = createInstance({\r\n    sdkKey: sdkKey,\r\n  });\r\n\r\n  function Pre(props) {\r\n    return <pre style={{ margin: 0 }}>{props.children}</pre>;\r\n  }\r\n\r\n  function isClientValid() {\r\n    return optimizelyClient.getOptimizelyConfig() !== null;\r\n  }\r\n\r\n  const donePromise = new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      optimizelyClient.onReady().then(() => {\r\n        if (!optimizelyClient.isValidInstance()) {\r\n          console.log('hi');\r\n        }\r\n        //if (isClientValid()) {\r\n        // userIds.forEach((userId) => {\r\n        //   const question = `Pretend that user ${userId} made a purchase?`;\r\n        //   const trackEvent = window.confirm(question);\r\n        //   optimizelyClient.track('purchase', userId);\r\n        //   const message = trackEvent\r\n        //                     ? \"Optimizely recorded a purchase in experiment results for this user\"\r\n        //                     : \"Optimizely didn't record a purchase in experiment results for this user\";\r\n        //   userMessages[userId].push(`${question} ${trackEvent ? 'Y' : 'N'}`, message);\r\n        // });\r\n        //}\r\n        resolve();\r\n      });\r\n    }, 500);\r\n  });\r\n\r\n  function FlagsOffMessage({ projectId }) {\r\n    const navLink = `https://app.optimizely.com/v2/projects/${projectId}/settings/implementation`;\r\n    return (\r\n      <div>\r\n        <Pre>Flag was off for everyone. Some reasons could include:</Pre>\r\n        <Pre>\r\n          1. Your sample size of visitors was too small. Rerun, or increase the\r\n          iterations in the FOR loop\r\n        </Pre>\r\n        <Pre>\r\n          2. By default you have 2 keys for 2 project environments (dev/prod).\r\n          Verify in Settings>Environments that you used the right key for the\r\n          environment where your flag is toggled to ON.\r\n        </Pre>\r\n        <Pre>\r\n          Check your key at <a href={navLink}>{navLink}</a>\r\n        </Pre>\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function Decision({ userId, setHasOnFlag }) {\r\n    // Generally React SDK runs for one client at a time i.e for one user throughout the lifecycle.\r\n    // You can provide the user Id once while wrapping the app in the Provider component and the SDK will memoize and reuse it throughout the application lifecycle.\r\n    // For this example, we are simulating 10 different users so we will ignore this and pass override User IDs to the useDecision hook for demonstration purpose.\r\n    // This override will not be needed for normal react sdk use cases.\r\n    const [decision, clientReady] = useDecision(\r\n      flagKey,\r\n      {},\r\n      { overrideUserId: userId }\r\n    );\r\n\r\n    // Don't render the component if SDK client is not ready yet.\r\n    if (!clientReady) {\r\n      return '';\r\n    }\r\n\r\n    const variationKey = decision.variationKey;\r\n    if (variationKey === null) {\r\n      console.log(' decision error: ', decision['reasons']);\r\n    }\r\n\r\n    if (decision.enabled) {\r\n      setTimeout(() => setHasOnFlag(true));\r\n    }\r\n\r\n    return (\r\n      <Typography variant='body1'>\r\n        {`Flag ${\r\n          decision.enabled ? 'on' : 'off'\r\n        }. User number ${userId} saw flag variation: ${variationKey} as part of flag rule: ${\r\n          decision.ruleKey\r\n        }`}\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  // Instantiate an Optimizely client\r\n  const [hasOnFlag, setHasOnFlag] = useState(false);\r\n  const [isDone, setIsDone] = useState(false);\r\n  const [isClientReady, setIsClientReady] = useState(null);\r\n\r\n  donePromise.then(() => setIsDone(true));\r\n  optimizelyClient.onReady().then(() => {\r\n    isClientValid() && setIsClientReady(true);\r\n  });\r\n\r\n  let projectId;\r\n\r\n  if (isClientValid()) {\r\n    const datafile = JSON.parse(\r\n      optimizelyClient.getOptimizelyConfig().getDatafile()\r\n    );\r\n    projectId = datafile.projectId;\r\n    console.log(datafile);\r\n  }\r\n\r\n  const reportsNavLink = `https://app.optimizely.com/v2/projects/${projectId}/reports`;\r\n\r\n  //\r\n  // Aggregate decisions for pie chart\r\n  //\r\n  let decisions = [];\r\n  console.log(\r\n    JSON.stringify({\r\n      isDone: isDone,\r\n      isClientReady: isClientReady,\r\n      isClientValid: isClientValid(),\r\n    })\r\n  );\r\n  if (isDone && isClientReady && isClientValid()) {\r\n    const userIds = [];\r\n    while (userIds.length < numUsers) {\r\n      userIds.push(`user-${userIds.length + 1}`);\r\n    }\r\n    userIds.map((userId) => {\r\n      // Randomly assign user a country attribute of US or CO\r\n      let rand = Math.round(Math.random());\r\n      let userCountryCode = rand === 0 ? 'US' : 'CO';\r\n      let attributes = {\r\n        country: userCountryCode,\r\n        randomNumber: Math.round(Math.random()),\r\n      };\r\n      // Create hardcoded user & bucket user into a flag variation\r\n      let user = optimizelyClient.createUserContext(userId, attributes);\r\n      let decision = user.decide(flagKey);\r\n      decisions.push(decision);\r\n    });\r\n  }\r\n  console.log(decisions);\r\n\r\n  if (inputSettings) {\r\n    return <div></div>;\r\n  } else {\r\n    return <div></div>;\r\n  }\r\n\r\n  //return <TextField id='outlined-basic' label='Outlined' variant='outlined' />;\r\n};\r\n\r\nexport default DecisionResults;\r\n","import React, { useState } from 'react';\r\n\r\n// components\r\nimport InputSettings from './InputSettings';\r\nimport DecisionResults from './DecisionResults';\r\n\r\n// mui\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Container from '@mui/material/Container';\r\n\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\n\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n  ...theme.typography.body2,\r\n  padding: theme.spacing(1),\r\n  textAlign: 'center',\r\n  color: theme.palette.text.secondary,\r\n}));\r\n\r\nconst AppLayout = (props) => {\r\n  const [inputSettings, setInputSettings] = useState(null);\r\n  // Passed on props to InputSettings and passed up when submitted\r\n  const getInputSettings = (settings) => {\r\n    setInputSettings(settings);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Box sx={{ flexGrow: 1, height: '100vh' }}>\r\n        <AppBar position='static'>\r\n          <Toolbar>\r\n            <Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>\r\n              Flags Helper\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Item>\r\n          <InputSettings setInputSettings={setInputSettings} />\r\n          {inputSettings ? (\r\n            <DecisionResults inputSettings={inputSettings} />\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n        </Item>\r\n      </Box>\r\n      {/* <Box sx={{ flexGrow: 1, height: '100vh' }}>\r\n        <AppBar position='static'>\r\n          <Toolbar>\r\n            <Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>\r\n              Flags Helper\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <Grid container spacing={0}>\r\n          <Grid item xs={2}>\r\n            <Item>xs=2</Item>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Item>\r\n              <ProjectSettings />\r\n            </Item>\r\n          </Grid>\r\n        </Grid>\r\n      </Box> */}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AppLayout;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport AppLayout from './components/AppLayout'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppLayout />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}