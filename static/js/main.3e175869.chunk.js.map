{"version":3,"sources":["reportWebVitals.js","components/InputSettings.js","components/DecisionTable.js","components/DecisionResults.js","components/AppLayout.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InputSettings","styled","MuiInput","setInputSettings","useState","sdkKey","setSdkKey","flagKey","setFlagKey","numUsers","setNumUsers","eventKey","setEventKey","numRuns","setNumRuns","sdkMethod","setSdkMethod","attributes","setAttributes","Box","component","sx","m","width","noValidate","autoComplete","TextField","id","label","required","value","onInput","e","target","FormControl","FormLabel","RadioGroup","name","onChange","FormControlLabel","control","Radio","Button","variant","onClick","DecisionTable","decisionResults","columnFields","Object","getOwnPropertyNames","columns","map","field","push","headerName","editable","height","DataGrid","getRowId","row","userId","rows","rowsPerPageOptions","disableSelectionOnClick","DecisionResults","inputSettings","allDecisions","setAllDecisions","useEffect","makeDecisions","decisions","optimizelyClient","createInstance","isClientValid","getOptimizelyConfig","decisionKey","a","decisionArray","onReady","isValidInstance","console","log","i","Math","floor","random","toString","atts","JSON","parse","user","createUserContext","decision","decide","trackEvent","flagOrFeatureKey","ruleKey","variation","variationKey","enabled","activation","activate","track","ruleOrExperimentKey","isFeatureEnabled","flagState","length","p","Typography","Item","Paper","theme","typography","body2","padding","spacing","textAlign","color","palette","text","secondary","AppLayout","props","Fragment","CssBaseline","flexGrow","AppBar","position","Toolbar","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e175869.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\n\nimport {\n  TextField,\n  Box,\n  Button,\n  Radio,\n  RadioGroup,\n  FormControlLabel,\n  FormLabel,\n  FormControl,\n} from '@mui/material';\nimport MuiInput from '@mui/material/Input';\nimport { styled } from '@mui/material/styles';\n/*\n TO DOs\n- Update Flag key be a dropdown (Select in mui) that pulls once SDK key is entered\n*/\n\nconst Input = styled(MuiInput)`\n  width: 42px;\n`;\n\nconst InputSettings = ({ setInputSettings }) => {\n  // Handle form values\n  const [sdkKey, setSdkKey] = useState('5D8CK43mj6URqNwwUUGWz');\n  const [flagKey, setFlagKey] = useState('product_sort');\n  const [numUsers, setNumUsers] = useState(5);\n  const [eventKey, setEventKey] = useState('');\n  const [numRuns, setNumRuns] = useState(0);\n  const [sdkMethod, setSdkMethod] = useState('decide');\n  const [attributes, setAttributes] = useState('{\"device\": \"ios\"}');\n\n  const [value, setValue] = useState(30);\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = (event) => {\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      setValue(0);\n    } else if (value > 100) {\n      setValue(100);\n    }\n  };\n\n  const handleSubmit = () => {\n    // numRuns handles making decisions when \"Run\" button is clicked\n    setNumRuns(numRuns + 1);\n    const formValues = {\n      sdkKey: sdkKey === '' ? null : sdkKey,\n      flagKey: flagKey === '' ? null : flagKey,\n      numUsers: numUsers === '' ? null : numUsers,\n      eventKey: eventKey === '' ? null : eventKey,\n      sdkMethod: sdkMethod === '' ? null : sdkMethod,\n      numRuns: numRuns,\n      attributes: attributes\n    };\n    setInputSettings(formValues);\n  };\n\n  return (\n    <Box\n      component='form'\n      sx={{\n        '& > :not(style)': { m: 1, width: '25ch' },\n      }}\n      noValidate\n      autoComplete='off'\n    >\n      <TextField\n        id='sdk-key-input'\n        label='SDK key'\n        required\n        value={sdkKey}\n        onInput={(e) => setSdkKey(e.target.value)}\n      />\n      <TextField\n        id='key-input'\n        label='Key (Flag/Rule/Experiment/Feature)'\n        required\n        value={flagKey}\n        onInput={(e) => setFlagKey(e.target.value)}\n      />\n      <TextField\n        id='flag-key-input'\n        label='Users to fake (#)'\n        required\n        value={numUsers}\n        onInput={(e) => setNumUsers(e.target.value)}\n      />\n      <TextField\n        id='event-key-input'\n        label='Event to mock'\n        value={eventKey}\n        onInput={(e) => setEventKey(e.target.value)}\n      />\n        <TextField\n        id='attributes-input'\n        label='User attributes'\n        value={attributes}\n        onInput={(e) => setAttributes(e.target.value)}\n      />\n      <FormControl>\n        <FormLabel id='demo-controlled-radio-buttons-group'>\n          SDK Method\n        </FormLabel>\n        <RadioGroup\n          aria-labelledby='demo-radio-buttons-group-label'\n          value={sdkMethod}\n          name='radio-buttons-group'\n          onChange={(e) => setSdkMethod(e.target.value)}\n        >\n          <FormControlLabel value='decide' control={<Radio />} label='Decide' />\n          <FormControlLabel\n            value='activate'\n            control={<Radio />}\n            label='Activate'\n          />\n          <FormControlLabel\n            value='isFeatureEnabled'\n            control={<Radio />}\n            label='IsFeatureEnabled'\n          />\n        </RadioGroup>\n      </FormControl>\n\n      <Button variant='contained' onClick={() => handleSubmit()}>\n        Run\n      </Button>\n    </Box>\n  );\n};\n\nexport default InputSettings;\n","import React, { useState, useEffect } from 'react';\n// Javascript sdk\nimport { createInstance } from '@optimizely/optimizely-sdk';\n// React sdk\nimport {\n  //createInstance,\n  OptimizelyProvider,\n  useDecision,\n} from '@optimizely/react-sdk';\n// mui\nimport { Typography, Box } from '@mui/material';\n// charts\nimport { PieChart } from 'recharts';\n\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\n\nconst DecisionTable = ({ decisionResults }) => {\n  // Get object property names for columns\n  const columnFields = Object.getOwnPropertyNames(decisionResults[0]);\n  let columns = [];\n\n  columnFields.map((field) => {\n    columns.push({\n      field: field,\n      headerName: field,\n      width: 200,\n      editable: false,\n    });\n  });\n\n  return (\n    <Box sx={{ height: 600, width: '100%' }}>\n      <DataGrid\n        getRowId={(row) => row.userId}\n        rows={decisionResults}\n        columns={columns}\n        rowsPerPageOptions={[100]}\n        disableSelectionOnClick\n        //experimentalFeatures={{ newEditingApi: true }}\n      />\n    </Box>\n  );\n};\n\nexport default DecisionTable;\n","import React, { useState, useEffect } from 'react';\n// Javascript sdk\nimport { createInstance } from '@optimizely/optimizely-sdk';\n// React sdk\nimport {\n  //createInstance,\n  OptimizelyProvider,\n  useDecision,\n} from '@optimizely/react-sdk';\n// mui\nimport { Typography, Box } from '@mui/material';\n// charts\nimport { PieChart } from 'recharts';\n// Table component\nimport DecisionTable from './DecisionTable';\n\nconst DecisionResults = ({ inputSettings }) => {\n  const { sdkKey, flagKey, numUsers, sdkMethod, eventKey, numRuns, attributes } =\n    inputSettings;\n  const [allDecisions, setAllDecisions] = useState([]);\n\n  useEffect(() => {\n    makeDecisions(flagKey, eventKey).then((decisions) => {\n      if (decisions != allDecisions) {\n        setAllDecisions(decisions);\n      }\n    });\n  }, [numRuns]);\n\n  // Use SDK method from input form\n  // useEffect(() => {\n  //   if (sdkMethod === 'decide') {\n  //     mockDecisions(flagKey).then((decisions) => {\n  //       if (decisions != allDecisions) {\n  //         setAllDecisions(decisions);\n  //       }\n  //     });\n  //   } else if (sdkMethod === 'activate') {\n  //     mockActivate(flagKey).then((decisions) => {\n  //       if (decisions != allDecisions) {\n  //         setAllDecisions(decisions);\n  //       }\n  //     });\n  //   } else if (sdkMethod === 'isFeatureEnabled') {\n  //     mockIsFeatureEnabled(flagKey).then((decisions) => {\n  //       if (decisions != allDecisions) {\n  //         setAllDecisions(decisions);\n  //       }\n  //     });\n  //   }\n  // }, [numRuns]);\n\n  const optimizelyClient = createInstance({\n    sdkKey: sdkKey,\n  });\n\n  function Pre(props) {\n    return <pre style={{ margin: 0 }}>{props.children}</pre>;\n  }\n\n  function isClientValid() {\n    return optimizelyClient.getOptimizelyConfig() !== null;\n  }\n\n  // consolidated makeDecisions function that toggles betwee sdk methods\n  async function makeDecisions(decisionKey, eventKey) {\n    let decisionArray = [];\n    await optimizelyClient.onReady();\n\n    if (!optimizelyClient.isValidInstance()) {\n      console.log('Invalid Opti Instance');\n    }\n\n    if (isClientValid()) {\n      for (let i = 0; i < numUsers; i++) {\n        // TODO - implement user attributes\n\n        // Randomly assign user a country attribute of US or CO\n        //let rand = Math.round(Math.random());\n        //let userCountryCode = rand === 0 ? 'US' : 'CO';\n        // let attributes = {\n        //   country: userCountryCode,\n        //   randomNumber: Math.round(Math.random()),\n        // };\n\n        // make a random user ID\n        const userId = Math.floor(\n          Math.random() * (100000 - 10000) + 10000\n        ).toString();\n\n        if (sdkMethod === 'decide') {\n          let atts = JSON.parse(attributes);\n          console.log(atts);\n\n          let user = optimizelyClient.createUserContext(userId, atts);\n          console.log(user)\n          let decision = user.decide(decisionKey);\n          // Send event\n          if (eventKey) {\n            // TODO - implement event tags\n            user.trackEvent(eventKey);\n          }\n\n          decisionArray.push({\n            userId: userId,\n            flagOrFeatureKey: decision.flagKey,\n            ruleKey: decision.ruleKey,\n            variation: decision.variationKey,\n            enabled: decision.enabled,\n          });\n        } else if (sdkMethod === 'activate') {\n          let activation = optimizelyClient.activate(decisionKey, userId, attributes);\n\n          // Send event\n          if (eventKey) {\n            // TODO - implement event tags\n            optimizelyClient.track(eventKey, userId);\n          }\n\n          decisionArray.push({\n            userId: userId,\n            ruleOrExperimentKey: decisionKey,\n            variationKey: activation,\n          });\n        } else if (sdkMethod === 'isFeatureEnabled') {\n          let isFeatureEnabled = optimizelyClient.isFeatureEnabled(\n            decisionKey,\n            userId\n          );\n\n          // Send event\n          if (eventKey) {\n            optimizelyClient.track(eventKey, userId, attributes);\n          }\n          decisionArray.push({\n            userId: userId,\n            flagOrFeatureKey: decisionKey,\n            flagState: isFeatureEnabled,\n          });\n        }\n      }\n      return decisionArray;\n    }\n  }\n\n  // RENDER RESULTS\n\n  if (allDecisions.length > 0) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography variant='h4'>Decision Results</Typography>\n        <DecisionTable decisionResults={allDecisions} />\n      </Box>\n    );\n  } else return null;\n};\n\nexport default DecisionResults;\n","import React, { useState } from 'react';\n\n// components\nimport InputSettings from './InputSettings';\nimport DecisionResults from './DecisionResults';\n\n// mui\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Container from '@mui/material/Container';\n\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\n\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nconst Item = styled(Paper)(({ theme }) => ({\n  ...theme.typography.body2,\n  padding: theme.spacing(1),\n  textAlign: 'center',\n  color: theme.palette.text.secondary,\n}));\n\nconst AppLayout = (props) => {\n  const [inputSettings, setInputSettings] = useState(null);\n  // Passed on props to InputSettings and passed up when submitted\n  const getInputSettings = (settings) => {\n    setInputSettings(settings);\n  };\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Box sx={{ flexGrow: 1, height: '100vh' }}>\n        <AppBar position='static'>\n          <Toolbar>\n            <Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>\n              Flags Helper\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Item>\n          <InputSettings setInputSettings={setInputSettings} />\n        </Item>\n        <div>\n          {inputSettings ? (\n            <DecisionResults inputSettings={inputSettings} />\n          ) : (\n            <div></div>\n          )}\n        </div>\n      </Box>\n      {/* <Box sx={{ flexGrow: 1, height: '100vh' }}>\n        <AppBar position='static'>\n          <Toolbar>\n            <Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>\n              Flags Helper\n            </Typography>\n          </Toolbar>\n        </AppBar>\n\n        <Grid container spacing={0}>\n          <Grid item xs={2}>\n            <Item>xs=2</Item>\n          </Grid>\n          <Grid item xs={10}>\n            <Item>\n              <ProjectSettings />\n            </Item>\n          </Grid>\n        </Grid>\n      </Box> */}\n    </React.Fragment>\n  );\n};\n\nexport default AppLayout;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppLayout from './components/AppLayout'\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppLayout />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}