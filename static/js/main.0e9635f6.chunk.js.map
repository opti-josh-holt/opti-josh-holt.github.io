{"version":3,"sources":["reportWebVitals.js","components/InputSettings.js","components/DecisionTable.js","components/DecisionResults.js","components/AppLayout.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InputSettings","styled","MuiInput","setInputSettings","useState","sdkKey","setSdkKey","flagKey","setFlagKey","numUsers","setNumUsers","eventKey","setEventKey","numRuns","setNumRuns","sdkMethod","setSdkMethod","Box","component","sx","m","width","noValidate","autoComplete","TextField","id","label","required","value","onInput","e","target","FormControl","FormLabel","RadioGroup","name","onChange","FormControlLabel","control","Radio","Button","variant","onClick","DecisionTable","decisionResults","columnFields","Object","getOwnPropertyNames","columns","map","field","push","headerName","editable","height","DataGrid","getRowId","row","userId","rows","rowsPerPageOptions","disableSelectionOnClick","DecisionResults","inputSettings","allDecisions","setAllDecisions","useEffect","makeDecisions","decisions","optimizelyClient","createInstance","isClientValid","getOptimizelyConfig","decisionKey","a","decisionArray","onReady","isValidInstance","console","log","i","Math","floor","random","toString","user","createUserContext","decision","decide","trackEvent","flagOrFeatureKey","ruleKey","variation","variationKey","enabled","activation","activate","track","ruleOrExperimentKey","isFeatureEnabled","flagState","length","p","Typography","Item","Paper","theme","typography","body2","padding","spacing","textAlign","color","palette","text","secondary","AppLayout","props","Fragment","CssBaseline","flexGrow","AppBar","position","Toolbar","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e9635f6.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useState } from 'react';\r\n\r\nimport {\r\n  TextField,\r\n  Box,\r\n  Button,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  FormControl,\r\n} from '@mui/material';\r\nimport MuiInput from '@mui/material/Input';\r\nimport { styled } from '@mui/material/styles';\r\n/*\r\n TO DOs\r\n- Update Flag key be a dropdown (Select in mui) that pulls once SDK key is entered\r\n*/\r\n\r\nconst Input = styled(MuiInput)`\r\n  width: 42px;\r\n`;\r\n\r\nconst InputSettings = ({ setInputSettings }) => {\r\n  // Handle form values\r\n  const [sdkKey, setSdkKey] = useState('5D8CK43mj6URqNwwUUGWz');\r\n  const [flagKey, setFlagKey] = useState('product_sort');\r\n  const [numUsers, setNumUsers] = useState(5);\r\n  const [eventKey, setEventKey] = useState('');\r\n  const [numRuns, setNumRuns] = useState(0);\r\n  const [sdkMethod, setSdkMethod] = useState('decide');\r\n\r\n  const [value, setValue] = useState(30);\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    if (value < 0) {\r\n      setValue(0);\r\n    } else if (value > 100) {\r\n      setValue(100);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    // numRuns handles making decisions when \"Run\" button is clicked\r\n    setNumRuns(numRuns + 1);\r\n    const formValues = {\r\n      sdkKey: sdkKey === '' ? null : sdkKey,\r\n      flagKey: flagKey === '' ? null : flagKey,\r\n      numUsers: numUsers === '' ? null : numUsers,\r\n      eventKey: eventKey === '' ? null : eventKey,\r\n      sdkMethod: sdkMethod === '' ? null : sdkMethod,\r\n      numRuns: numRuns,\r\n    };\r\n    setInputSettings(formValues);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      component='form'\r\n      sx={{\r\n        '& > :not(style)': { m: 1, width: '25ch' },\r\n      }}\r\n      noValidate\r\n      autoComplete='off'\r\n    >\r\n      <TextField\r\n        id='sdk-key-input'\r\n        label='SDK key'\r\n        required\r\n        value={sdkKey}\r\n        onInput={(e) => setSdkKey(e.target.value)}\r\n      />\r\n      <TextField\r\n        id='key-input'\r\n        label='Key (Flag/Rule/Experiment/Feature)'\r\n        required\r\n        value={flagKey}\r\n        onInput={(e) => setFlagKey(e.target.value)}\r\n      />\r\n      <TextField\r\n        id='flag-key-input'\r\n        label='Users to fake (#)'\r\n        required\r\n        value={numUsers}\r\n        onInput={(e) => setNumUsers(e.target.value)}\r\n      />\r\n      <TextField\r\n        id='event-key-input'\r\n        label='Event to mock'\r\n        value={eventKey}\r\n        onInput={(e) => setEventKey(e.target.value)}\r\n      />\r\n      <FormControl>\r\n        <FormLabel id='demo-controlled-radio-buttons-group'>\r\n          SDK Method\r\n        </FormLabel>\r\n        <RadioGroup\r\n          aria-labelledby='demo-radio-buttons-group-label'\r\n          value={sdkMethod}\r\n          name='radio-buttons-group'\r\n          onChange={(e) => setSdkMethod(e.target.value)}\r\n        >\r\n          <FormControlLabel value='decide' control={<Radio />} label='Decide' />\r\n          <FormControlLabel\r\n            value='activate'\r\n            control={<Radio />}\r\n            label='Activate'\r\n          />\r\n          <FormControlLabel\r\n            value='isFeatureEnabled'\r\n            control={<Radio />}\r\n            label='IsFeatureEnabled'\r\n          />\r\n        </RadioGroup>\r\n      </FormControl>\r\n\r\n      <Button variant='contained' onClick={() => handleSubmit()}>\r\n        Run\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InputSettings;\r\n","import React, { useState, useEffect } from 'react';\r\n// Javascript sdk\r\nimport { createInstance } from '@optimizely/optimizely-sdk';\r\n// React sdk\r\nimport {\r\n  //createInstance,\r\n  OptimizelyProvider,\r\n  useDecision,\r\n} from '@optimizely/react-sdk';\r\n// mui\r\nimport { Typography, Box } from '@mui/material';\r\n// charts\r\nimport { PieChart } from 'recharts';\r\n\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n\r\nconst DecisionTable = ({ decisionResults }) => {\r\n  // Get object property names for columns\r\n  const columnFields = Object.getOwnPropertyNames(decisionResults[0]);\r\n  let columns = [];\r\n\r\n  columnFields.map((field) => {\r\n    columns.push({\r\n      field: field,\r\n      headerName: field,\r\n      width: 200,\r\n      editable: false,\r\n    });\r\n  });\r\n\r\n  return (\r\n    <Box sx={{ height: 600, width: '100%' }}>\r\n      <DataGrid\r\n        getRowId={(row) => row.userId}\r\n        rows={decisionResults}\r\n        columns={columns}\r\n        rowsPerPageOptions={[100]}\r\n        disableSelectionOnClick\r\n        //experimentalFeatures={{ newEditingApi: true }}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default DecisionTable;\r\n","import React, { useState, useEffect } from 'react';\r\n// Javascript sdk\r\nimport { createInstance } from '@optimizely/optimizely-sdk';\r\n// React sdk\r\nimport {\r\n  //createInstance,\r\n  OptimizelyProvider,\r\n  useDecision,\r\n} from '@optimizely/react-sdk';\r\n// mui\r\nimport { Typography, Box } from '@mui/material';\r\n// charts\r\nimport { PieChart } from 'recharts';\r\n// Table component\r\nimport DecisionTable from './DecisionTable';\r\n\r\nconst DecisionResults = ({ inputSettings }) => {\r\n  const { sdkKey, flagKey, numUsers, sdkMethod, eventKey, numRuns } =\r\n    inputSettings;\r\n  const [allDecisions, setAllDecisions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    makeDecisions(flagKey, eventKey).then((decisions) => {\r\n      if (decisions != allDecisions) {\r\n        setAllDecisions(decisions);\r\n      }\r\n    });\r\n  }, [numRuns]);\r\n\r\n  // Use SDK method from input form\r\n  // useEffect(() => {\r\n  //   if (sdkMethod === 'decide') {\r\n  //     mockDecisions(flagKey).then((decisions) => {\r\n  //       if (decisions != allDecisions) {\r\n  //         setAllDecisions(decisions);\r\n  //       }\r\n  //     });\r\n  //   } else if (sdkMethod === 'activate') {\r\n  //     mockActivate(flagKey).then((decisions) => {\r\n  //       if (decisions != allDecisions) {\r\n  //         setAllDecisions(decisions);\r\n  //       }\r\n  //     });\r\n  //   } else if (sdkMethod === 'isFeatureEnabled') {\r\n  //     mockIsFeatureEnabled(flagKey).then((decisions) => {\r\n  //       if (decisions != allDecisions) {\r\n  //         setAllDecisions(decisions);\r\n  //       }\r\n  //     });\r\n  //   }\r\n  // }, [numRuns]);\r\n\r\n  const optimizelyClient = createInstance({\r\n    sdkKey: sdkKey,\r\n  });\r\n\r\n  function Pre(props) {\r\n    return <pre style={{ margin: 0 }}>{props.children}</pre>;\r\n  }\r\n\r\n  function isClientValid() {\r\n    return optimizelyClient.getOptimizelyConfig() !== null;\r\n  }\r\n\r\n  // consolidated makeDecisions function that toggles betwee sdk methods\r\n  async function makeDecisions(decisionKey, eventKey) {\r\n    let decisionArray = [];\r\n    await optimizelyClient.onReady();\r\n\r\n    if (!optimizelyClient.isValidInstance()) {\r\n      console.log('Invalid Opti Instance');\r\n    }\r\n\r\n    if (isClientValid()) {\r\n      for (let i = 0; i < numUsers; i++) {\r\n        // TODO - implement user attributes\r\n\r\n        // Randomly assign user a country attribute of US or CO\r\n        //let rand = Math.round(Math.random());\r\n        //let userCountryCode = rand === 0 ? 'US' : 'CO';\r\n        // let attributes = {\r\n        //   country: userCountryCode,\r\n        //   randomNumber: Math.round(Math.random()),\r\n        // };\r\n\r\n        // make a random user ID\r\n        const userId = Math.floor(\r\n          Math.random() * (100000 - 10000) + 10000\r\n        ).toString();\r\n\r\n        if (sdkMethod === 'decide') {\r\n          let user = optimizelyClient.createUserContext(userId);\r\n          let decision = user.decide(decisionKey);\r\n\r\n          // Send event\r\n          if (eventKey) {\r\n            // TODO - implement event tags\r\n            user.trackEvent(eventKey);\r\n          }\r\n\r\n          decisionArray.push({\r\n            userId: userId,\r\n            flagOrFeatureKey: decision.flagKey,\r\n            ruleKey: decision.ruleKey,\r\n            variation: decision.variationKey,\r\n            enabled: decision.enabled,\r\n          });\r\n        } else if (sdkMethod === 'activate') {\r\n          let activation = optimizelyClient.activate(decisionKey, userId);\r\n\r\n          // Send event\r\n          if (eventKey) {\r\n            // TODO - implement event tags\r\n            optimizelyClient.track(eventKey, userId);\r\n          }\r\n\r\n          decisionArray.push({\r\n            userId: userId,\r\n            ruleOrExperimentKey: decisionKey,\r\n            variationKey: activation,\r\n          });\r\n        } else if (sdkMethod === 'isFeatureEnabled') {\r\n          let isFeatureEnabled = optimizelyClient.isFeatureEnabled(\r\n            decisionKey,\r\n            userId\r\n          );\r\n\r\n          // Send event\r\n          if (eventKey) {\r\n            optimizelyClient.track(eventKey, userId);\r\n          }\r\n          decisionArray.push({\r\n            userId: userId,\r\n            flagOrFeatureKey: decisionKey,\r\n            flagState: isFeatureEnabled,\r\n          });\r\n        }\r\n      }\r\n      return decisionArray;\r\n    }\r\n  }\r\n\r\n  // RENDER RESULTS\r\n  console.log(eventKey);\r\n\r\n  if (allDecisions.length > 0) {\r\n    return (\r\n      <Box sx={{ p: 3 }}>\r\n        <Typography variant='h4'>Decision Results</Typography>\r\n        <DecisionTable decisionResults={allDecisions} />\r\n      </Box>\r\n    );\r\n  } else return null;\r\n};\r\n\r\nexport default DecisionResults;\r\n","import React, { useState } from 'react';\r\n\r\n// components\r\nimport InputSettings from './InputSettings';\r\nimport DecisionResults from './DecisionResults';\r\n\r\n// mui\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Container from '@mui/material/Container';\r\n\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\n\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n  ...theme.typography.body2,\r\n  padding: theme.spacing(1),\r\n  textAlign: 'center',\r\n  color: theme.palette.text.secondary,\r\n}));\r\n\r\nconst AppLayout = (props) => {\r\n  const [inputSettings, setInputSettings] = useState(null);\r\n  // Passed on props to InputSettings and passed up when submitted\r\n  const getInputSettings = (settings) => {\r\n    setInputSettings(settings);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Box sx={{ flexGrow: 1, height: '100vh' }}>\r\n        <AppBar position='static'>\r\n          <Toolbar>\r\n            <Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>\r\n              Flags Helper\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Item>\r\n          <InputSettings setInputSettings={setInputSettings} />\r\n        </Item>\r\n        <div>\r\n          {inputSettings ? (\r\n            <DecisionResults inputSettings={inputSettings} />\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n        </div>\r\n      </Box>\r\n      {/* <Box sx={{ flexGrow: 1, height: '100vh' }}>\r\n        <AppBar position='static'>\r\n          <Toolbar>\r\n            <Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>\r\n              Flags Helper\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <Grid container spacing={0}>\r\n          <Grid item xs={2}>\r\n            <Item>xs=2</Item>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Item>\r\n              <ProjectSettings />\r\n            </Item>\r\n          </Grid>\r\n        </Grid>\r\n      </Box> */}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AppLayout;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport AppLayout from './components/AppLayout'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppLayout />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}