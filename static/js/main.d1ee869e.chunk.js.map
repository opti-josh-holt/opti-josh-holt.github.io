{"version":3,"sources":["reportWebVitals.js","components/InputSettings.js","components/DecisionResults.js","components/AppLayout.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InputSettings","styled","MuiInput","setInputSettings","useState","sdkKey","setSdkKey","flagKey","setFlagKey","numUsers","setNumUsers","Box","component","sx","m","width","noValidate","autoComplete","TextField","id","label","required","value","onInput","e","target","Button","variant","onClick","optimizelyClient","createInstance","Pre","props","style","margin","children","isClientValid","getOptimizelyConfig","userIds","length","push","userMessages","reduce","result","userId","donePromise","Promise","resolve","setTimeout","onReady","FlagsOffMessage","projectId","navLink","href","Decision","setHasOnFlag","useDecision","overrideUserId","decision","variationKey","console","log","enabled","sortMethod","variables","ruleKey","DecisionResults","inputSettings","hasOnFlag","isDone","setIsDone","isClientReady","setIsClientReady","datafile","JSON","parse","getDatafile","reportsNavLink","optimizely","user","map","message","Item","Paper","theme","typography","body2","padding","spacing","textAlign","color","palette","text","secondary","AppLayout","Fragment","CssBaseline","flexGrow","height","AppBar","position","Toolbar","Typography","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1ee869e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useState } from 'react';\r\n\r\nimport {\r\n  TextField,\r\n  Box,\r\n  Slider,\r\n  Typography,\r\n  Grid,\r\n  Button,\r\n} from '@mui/material';\r\nimport MuiInput from '@mui/material/Input';\r\nimport { styled } from '@mui/material/styles';\r\n/*\r\n TO DOs\r\n- Update Flag key be a dropdown (Select in mui) that pulls once SDK key is entered\r\n*/\r\n\r\nconst Input = styled(MuiInput)`\r\n  width: 42px;\r\n`;\r\n\r\nconst InputSettings = ({ setInputSettings }) => {\r\n  // Handle form values\r\n  const [sdkKey, setSdkKey] = useState('');\r\n  const [flagKey, setFlagKey] = useState('');\r\n  const [numUsers, setNumUsers] = useState('');\r\n\r\n  const [value, setValue] = useState(30);\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    if (value < 0) {\r\n      setValue(0);\r\n    } else if (value > 100) {\r\n      setValue(100);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const formValues = {\r\n      sdkKey: sdkKey === '' ? null : sdkKey,\r\n      flagKey: flagKey === '' ? null : flagKey,\r\n      numUsers: numUsers === '' ? null : numUsers,\r\n    };\r\n    setInputSettings(formValues);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      component='form'\r\n      sx={{\r\n        '& > :not(style)': { m: 1, width: '25ch' },\r\n      }}\r\n      noValidate\r\n      autoComplete='off'\r\n    >\r\n      <TextField\r\n        id='sdk-key-input'\r\n        label='SDK key'\r\n        required\r\n        value={sdkKey}\r\n        onInput={(e) => setSdkKey(e.target.value)}\r\n      />\r\n      <TextField\r\n        id='flag-key-input'\r\n        label='Flag key'\r\n        required\r\n        value={flagKey}\r\n        onInput={(e) => setFlagKey(e.target.value)}\r\n      />\r\n      <TextField\r\n        id='flag-key-input'\r\n        label='Users to fake (#)'\r\n        required\r\n        value={numUsers}\r\n        onInput={(e) => setNumUsers(e.target.value)}\r\n      />\r\n      <Button variant='contained' onClick={() => handleSubmit()}>\r\n        Run\r\n      </Button>\r\n      {/* \r\n      <Box sx={{ width: 250 }}>\r\n        <Typography id='input-slider' gutterBottom>\r\n          Users to convert (%)\r\n        </Typography>\r\n        <Grid container spacing={2} alignItems='center'>\r\n          <Grid item xs>\r\n            <Slider\r\n              value={typeof value === 'number' ? value : 0}\r\n              onChange={handleSliderChange}\r\n              aria-labelledby='input-slider'\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Input\r\n              value={value}\r\n              size='small'\r\n              onChange={handleInputChange}\r\n              onBlur={handleBlur}\r\n              inputProps={{\r\n                step: 10,\r\n                min: 0,\r\n                max: 100,\r\n                type: 'number',\r\n                'aria-labelledby': 'input-slider',\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Box> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InputSettings;\r\n","import React, { useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nimport {\r\n  createInstance,\r\n  OptimizelyProvider,\r\n  useDecision,\r\n  useExperiment,\r\n} from '@optimizely/react-sdk';\r\n\r\nconst optimizelyClient = createInstance({\r\n  sdkKey: '9rgh3WiYAPcvfoFcRYQnk', //prod\r\n});\r\n\r\nfunction Pre(props) {\r\n  return <pre style={{ margin: 0 }}>{props.children}</pre>;\r\n}\r\n\r\nfunction isClientValid() {\r\n  return optimizelyClient.getOptimizelyConfig() !== null;\r\n}\r\n\r\nconst userIds = [];\r\nwhile (userIds.length < 4) {\r\n  // userIds.push((Math.floor(Math.random() * 999999) + 100000).toString())\r\n  userIds.push(`user-${userIds.length + 1}`);\r\n}\r\n\r\nlet userMessages = userIds.reduce(\r\n  (result, userId) => ({ ...result, [userId]: [] }),\r\n  {}\r\n);\r\nconst donePromise = new Promise((resolve) => {\r\n  setTimeout(() => {\r\n    optimizelyClient.onReady().then(() => {\r\n      if (isClientValid()) {\r\n        // userIds.forEach((userId) => {\r\n        //   const question = `Pretend that user ${userId} made a purchase?`;\r\n        //   const trackEvent = window.confirm(question);\r\n        //   optimizelyClient.track('purchase', userId);\r\n        //   const message = trackEvent\r\n        //                     ? \"Optimizely recorded a purchase in experiment results for this user\"\r\n        //                     : \"Optimizely didn't record a purchase in experiment results for this user\";\r\n        //   userMessages[userId].push(`${question} ${trackEvent ? 'Y' : 'N'}`, message);\r\n        // });\r\n      }\r\n      resolve();\r\n    });\r\n  }, 500);\r\n});\r\n\r\nconst DecisionResults = ({ inputSettings }) => {\r\n  // Instantiate an Optimizely client\r\n  const [hasOnFlag, setHasOnFlag] = useState(false);\r\n  const [isDone, setIsDone] = useState(false);\r\n  const [isClientReady, setIsClientReady] = useState(null);\r\n\r\n  donePromise.then(() => setIsDone(true));\r\n  optimizelyClient.onReady().then(() => {\r\n    isClientValid() && setIsClientReady(true);\r\n  });\r\n\r\n  let projectId;\r\n\r\n  if (isClientValid()) {\r\n    const datafile = JSON.parse(\r\n      optimizelyClient.getOptimizelyConfig().getDatafile()\r\n    );\r\n    console.log(datafile);\r\n    projectId = datafile.projectId;\r\n  }\r\n\r\n  const reportsNavLink = `https://app.optimizely.com/v2/projects/${projectId}/reports`;\r\n\r\n  console.log(inputSettings);\r\n  if (inputSettings) {\r\n    return (\r\n      <OptimizelyProvider\r\n        optimizely={optimizelyClient}\r\n        // Generally React SDK runs for one client at a time i.e for one user throughout the lifecycle.\r\n        // You can provide the user Id here once and the SDK will memoize and reuse it throughout the application lifecycle.\r\n        // For this example, we are simulating 10 different users so we will ignore this and pass override User IDs to the useDecision hook for demonstration purpose.\r\n        user={{ id: 'default_user' }}\r\n      >\r\n        {isClientReady && (\r\n          <>\r\n            {userIds.map((userId) => (\r\n              <>\r\n                <Decision\r\n                  key={userId}\r\n                  userId={userId}\r\n                  setHasOnFlag={setHasOnFlag}\r\n                />\r\n                {userMessages[userId].map((message) => (\r\n                  <Pre>{message}</Pre>\r\n                ))}\r\n                <br />\r\n              </>\r\n            ))}\r\n            {!hasOnFlag && <FlagsOffMessage projectId={projectId} />}\r\n            {isDone && (\r\n              <>\r\n                <Pre>Done with your mocked A/B test.</Pre>\r\n                <Pre>\r\n                  Check out your report at{' '}\r\n                  <a href={reportsNavLink}>{reportsNavLink}</a>\r\n                </Pre>\r\n                <Pre>\r\n                  Be sure to select the environment that corresponds to your SDK\r\n                  key\r\n                </Pre>\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n        {isDone && !isClientReady && (\r\n          <Pre>\r\n            Optimizely client invalid. Verify in Settings -> Environments that\r\n            you used the primary environment's SDK key\r\n          </Pre>\r\n        )}\r\n      </OptimizelyProvider>\r\n    );\r\n  } else {\r\n    return <div></div>;\r\n  }\r\n\r\n  //return <TextField id='outlined-basic' label='Outlined' variant='outlined' />;\r\n};\r\n\r\nfunction FlagsOffMessage({ projectId }) {\r\n  const navLink = `https://app.optimizely.com/v2/projects/${projectId}/settings/implementation`;\r\n  return (\r\n    <div>\r\n      <Pre>Flag was off for everyone. Some reasons could include:</Pre>\r\n      <Pre>\r\n        1. Your sample size of visitors was too small. Rerun, or increase the\r\n        iterations in the FOR loop\r\n      </Pre>\r\n      <Pre>\r\n        2. By default you have 2 keys for 2 project environments (dev/prod).\r\n        Verify in Settings>Environments that you used the right key for the\r\n        environment where your flag is toggled to ON.\r\n      </Pre>\r\n      <Pre>\r\n        Check your key at <a href={navLink}>{navLink}</a>\r\n      </Pre>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Decision({ userId, setHasOnFlag }) {\r\n  // Generally React SDK runs for one client at a time i.e for one user throughout the lifecycle.\r\n  // You can provide the user Id once while wrapping the app in the Provider component and the SDK will memoize and reuse it throughout the application lifecycle.\r\n  // For this example, we are simulating 10 different users so we will ignore this and pass override User IDs to the useDecision hook for demonstration purpose.\r\n  // This override will not be needed for normal react sdk use cases.\r\n  const [decision, clientReady] = useDecision(\r\n    'mab_flag',\r\n    {},\r\n    { overrideUserId: userId }\r\n  );\r\n\r\n  // Don't render the component if SDK client is not ready yet.\r\n  if (!clientReady) {\r\n    return '';\r\n  }\r\n\r\n  const variationKey = decision.variationKey;\r\n  if (variationKey === null) {\r\n    console.log(' decision error: ', decision['reasons']);\r\n  }\r\n\r\n  if (decision.enabled) {\r\n    setTimeout(() => setHasOnFlag(true));\r\n  }\r\n\r\n  const sortMethod = decision.variables['sort_method'];\r\n\r\n  return (\r\n    <Pre>\r\n      {`Flag ${\r\n        decision.enabled ? 'on' : 'off'\r\n      }. User number ${userId} saw flag variation: ${variationKey} and got products sorted by: ${sortMethod} config variable as part of flag rule: ${\r\n        decision.ruleKey\r\n      }`}\r\n    </Pre>\r\n  );\r\n}\r\n\r\nexport default DecisionResults;\r\n","import React, { useState } from 'react';\r\n\r\n// components\r\nimport InputSettings from './InputSettings';\r\nimport DecisionResults from './DecisionResults';\r\n\r\n// mui\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Container from '@mui/material/Container';\r\n\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\n\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n  ...theme.typography.body2,\r\n  padding: theme.spacing(1),\r\n  textAlign: 'center',\r\n  color: theme.palette.text.secondary,\r\n}));\r\n\r\nconst AppLayout = (props) => {\r\n  const [inputSettings, setInputSettings] = useState(null);\r\n  // Passed on props to InputSettings and passed up when submitted\r\n  const getInputSettings = (settings) => {\r\n    setInputSettings(settings);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Box sx={{ flexGrow: 1, height: '100vh' }}>\r\n        <AppBar position='static'>\r\n          <Toolbar>\r\n            <Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>\r\n              Flags Helper\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Item>\r\n          {JSON.stringify(inputSettings)}\r\n          <InputSettings setInputSettings={setInputSettings} />\r\n          {inputSettings ? (\r\n            <DecisionResults inputSettings={inputSettings} />\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n        </Item>\r\n      </Box>\r\n      {/* <Box sx={{ flexGrow: 1, height: '100vh' }}>\r\n        <AppBar position='static'>\r\n          <Toolbar>\r\n            <Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>\r\n              Flags Helper\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <Grid container spacing={0}>\r\n          <Grid item xs={2}>\r\n            <Item>xs=2</Item>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Item>\r\n              <ProjectSettings />\r\n            </Item>\r\n          </Grid>\r\n        </Grid>\r\n      </Box> */}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AppLayout;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport AppLayout from './components/AppLayout'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppLayout />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}