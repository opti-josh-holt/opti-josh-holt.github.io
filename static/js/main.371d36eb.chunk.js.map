{"version":3,"sources":["reportWebVitals.js","components/InputSettings.js","components/NewDecisionResults.js","components/AppLayout.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InputSettings","styled","MuiInput","setInputSettings","useState","sdkKey","setSdkKey","flagKey","setFlagKey","numUsers","setNumUsers","eventKey","setEventKey","numRuns","setNumRuns","sdkMethod","setSdkMethod","Box","component","sx","m","width","noValidate","autoComplete","TextField","id","label","required","value","onInput","e","target","FormControl","FormLabel","RadioGroup","name","onChange","FormControlLabel","control","Radio","Button","variant","onClick","NewDecisionResults","inputSettings","allDecisions","setAllDecisions","useEffect","mockDecisions","decisions","mockActivate","mockIsFeatureEnabled","optimizelyClient","createInstance","isClientValid","getOptimizelyConfig","a","decisionArray","onReady","isValidInstance","console","log","i","rand","Math","round","random","attributes","country","randomNumber","userId","floor","toString","user","createUserContext","decision","decide","push","flagOrFeatureKey","ruleKey","variation","variationKey","enabled","experimentKey","activation","activate","ruleOrExperimentKey","featureKey","isFeatureEnabled","flagState","length","Typography","JSON","stringify","Item","Paper","theme","typography","body2","padding","spacing","textAlign","color","palette","text","secondary","AppLayout","props","Fragment","CssBaseline","flexGrow","height","AppBar","position","Toolbar","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.371d36eb.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useState } from 'react';\r\n\r\nimport {\r\n  TextField,\r\n  Box,\r\n  Button,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  FormControl,\r\n} from '@mui/material';\r\nimport MuiInput from '@mui/material/Input';\r\nimport { styled } from '@mui/material/styles';\r\n/*\r\n TO DOs\r\n- Update Flag key be a dropdown (Select in mui) that pulls once SDK key is entered\r\n*/\r\n\r\nconst Input = styled(MuiInput)`\r\n  width: 42px;\r\n`;\r\n\r\nconst InputSettings = ({ setInputSettings }) => {\r\n  // Handle form values\r\n  const [sdkKey, setSdkKey] = useState('5D8CK43mj6URqNwwUUGWz');\r\n  const [flagKey, setFlagKey] = useState('product_sort');\r\n  const [numUsers, setNumUsers] = useState(1);\r\n  const [eventKey, setEventKey] = useState('');\r\n  const [numRuns, setNumRuns] = useState(0);\r\n  const [sdkMethod, setSdkMethod] = useState('decide');\r\n\r\n  const [value, setValue] = useState(30);\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    if (value < 0) {\r\n      setValue(0);\r\n    } else if (value > 100) {\r\n      setValue(100);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    // numRuns handles making decisions when \"Run\" button is clicked\r\n    setNumRuns(numRuns + 1);\r\n    const formValues = {\r\n      sdkKey: sdkKey === '' ? null : sdkKey,\r\n      flagKey: flagKey === '' ? null : flagKey,\r\n      numUsers: numUsers === '' ? null : numUsers,\r\n      eventKey: eventKey === '' ? null : eventKey,\r\n      sdkMethod: sdkMethod === '' ? null : sdkMethod,\r\n      numRuns: numRuns,\r\n    };\r\n    setInputSettings(formValues);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      component='form'\r\n      sx={{\r\n        '& > :not(style)': { m: 1, width: '25ch' },\r\n      }}\r\n      noValidate\r\n      autoComplete='off'\r\n    >\r\n      <TextField\r\n        id='sdk-key-input'\r\n        label='SDK key'\r\n        required\r\n        value={sdkKey}\r\n        onInput={(e) => setSdkKey(e.target.value)}\r\n      />\r\n      <TextField\r\n        id='key-input'\r\n        label='Key (Flag/Rule/Experiment/Feature)'\r\n        required\r\n        value={flagKey}\r\n        onInput={(e) => setFlagKey(e.target.value)}\r\n      />\r\n      <TextField\r\n        id='flag-key-input'\r\n        label='Users to fake (#)'\r\n        required\r\n        value={numUsers}\r\n        onInput={(e) => setNumUsers(e.target.value)}\r\n      />\r\n      <TextField\r\n        id='event-key-input'\r\n        label='Event to mock'\r\n        value={eventKey}\r\n        onInput={(e) => setEventKey(e.target.value)}\r\n      />\r\n      <FormControl>\r\n        <FormLabel id='demo-controlled-radio-buttons-group'>\r\n          SDK Method\r\n        </FormLabel>\r\n        <RadioGroup\r\n          aria-labelledby='demo-radio-buttons-group-label'\r\n          value={sdkMethod}\r\n          name='radio-buttons-group'\r\n          onChange={(e) => setSdkMethod(e.target.value)}\r\n        >\r\n          <FormControlLabel value='decide' control={<Radio />} label='Decide' />\r\n          <FormControlLabel\r\n            value='activate'\r\n            control={<Radio />}\r\n            label='Activate'\r\n          />\r\n          <FormControlLabel\r\n            value='isFeatureEnabled'\r\n            control={<Radio />}\r\n            label='IsFeatureEnabled'\r\n          />\r\n        </RadioGroup>\r\n      </FormControl>\r\n\r\n      <Button variant='contained' onClick={() => handleSubmit()}>\r\n        Run\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InputSettings;\r\n","import React, { useState, useEffect } from 'react';\r\n// Javascript sdk\r\nimport { createInstance } from '@optimizely/optimizely-sdk';\r\n// React sdk\r\nimport {\r\n  //createInstance,\r\n  OptimizelyProvider,\r\n  useDecision,\r\n} from '@optimizely/react-sdk';\r\n// mui\r\nimport { Typography } from '@mui/material';\r\n// charts\r\nimport { PieChart } from 'recharts';\r\n\r\nconst NewDecisionResults = ({ inputSettings }) => {\r\n  const { sdkKey, flagKey, numUsers, sdkMethod, numRuns } = inputSettings;\r\n  const [allDecisions, setAllDecisions] = useState([]);\r\n\r\n  // Use SDK method from input form\r\n  useEffect(() => {\r\n    if (sdkMethod === 'decide') {\r\n      mockDecisions(flagKey).then((decisions) => {\r\n        if (decisions != allDecisions) {\r\n          setAllDecisions(decisions);\r\n        }\r\n      });\r\n    } else if (sdkMethod === 'activate') {\r\n      mockActivate(flagKey).then((decisions) => {\r\n        if (decisions != allDecisions) {\r\n          setAllDecisions(decisions);\r\n        }\r\n      });\r\n    } else if (sdkMethod === 'isFeatureEnabled') {\r\n      mockIsFeatureEnabled(flagKey).then((decisions) => {\r\n        if (decisions != allDecisions) {\r\n          setAllDecisions(decisions);\r\n        }\r\n      });\r\n    }\r\n  }, [numRuns]);\r\n\r\n  const optimizelyClient = createInstance({\r\n    sdkKey: sdkKey,\r\n  });\r\n\r\n  function Pre(props) {\r\n    return <pre style={{ margin: 0 }}>{props.children}</pre>;\r\n  }\r\n\r\n  function isClientValid() {\r\n    return optimizelyClient.getOptimizelyConfig() !== null;\r\n  }\r\n\r\n  // DECIDE API\r\n\r\n  async function mockDecisions(flagKey) {\r\n    let decisionArray = [];\r\n    await optimizelyClient.onReady();\r\n\r\n    if (!optimizelyClient.isValidInstance()) {\r\n      console.log('Invalid Opti Instance');\r\n    }\r\n\r\n    if (isClientValid()) {\r\n      for (let i = 0; i < numUsers; i++) {\r\n        // Randomly assign user a country attribute of US or CO\r\n        let rand = Math.round(Math.random());\r\n        let userCountryCode = rand === 0 ? 'US' : 'CO';\r\n        let attributes = {\r\n          country: userCountryCode,\r\n          randomNumber: Math.round(Math.random()),\r\n        };\r\n\r\n        // make a random user ID\r\n        const userId = Math.floor(\r\n          Math.random() * (100000 - 10000) + 10000\r\n        ).toString();\r\n\r\n        let user = optimizelyClient.createUserContext(userId, attributes);\r\n        let decision = user.decide(flagKey);\r\n        console.log(decision);\r\n        decisionArray.push({\r\n          userId: userId,\r\n          flagOrFeatureKey: decision.flagKey,\r\n          ruleKey: decision.ruleKey,\r\n          variation: decision.variationKey,\r\n          enabled: decision.enabled,\r\n        });\r\n      }\r\n      return decisionArray;\r\n    }\r\n  }\r\n\r\n  // ACTIVATE\r\n\r\n  async function mockActivate(experimentKey) {\r\n    let decisionArray = [];\r\n    await optimizelyClient.onReady();\r\n\r\n    if (!optimizelyClient.isValidInstance()) {\r\n      console.log('Invalid Opti Instance');\r\n    }\r\n\r\n    if (isClientValid()) {\r\n      for (let i = 0; i < numUsers; i++) {\r\n        // Randomly assign user a country attribute of US or CO\r\n        let rand = Math.round(Math.random());\r\n        let userCountryCode = rand === 0 ? 'US' : 'CO';\r\n        let attributes = {\r\n          country: userCountryCode,\r\n          randomNumber: Math.round(Math.random()),\r\n        };\r\n\r\n        // make a random user ID\r\n        const userId = Math.floor(\r\n          Math.random() * (100000 - 10000) + 10000\r\n        ).toString();\r\n\r\n        let activation = optimizelyClient.activate(\r\n          experimentKey,\r\n          userId,\r\n          attributes\r\n        );\r\n\r\n        decisionArray.push({\r\n          userId: userId,\r\n          ruleOrExperimentKey: experimentKey,\r\n          variationKey: activation,\r\n        });\r\n      }\r\n      return decisionArray;\r\n    }\r\n  }\r\n\r\n  // IS FEATURE ENABLED\r\n\r\n  async function mockIsFeatureEnabled(featureKey) {\r\n    let decisionArray = [];\r\n    await optimizelyClient.onReady();\r\n\r\n    if (!optimizelyClient.isValidInstance()) {\r\n      console.log('Invalid Opti Instance');\r\n    }\r\n\r\n    if (isClientValid()) {\r\n      for (let i = 0; i < numUsers; i++) {\r\n        // Randomly assign user a country attribute of US or CO\r\n        let rand = Math.round(Math.random());\r\n        let userCountryCode = rand === 0 ? 'US' : 'CO';\r\n        let attributes = {\r\n          country: userCountryCode,\r\n          randomNumber: Math.round(Math.random()),\r\n        };\r\n\r\n        // make a random user ID\r\n        const userId = Math.floor(\r\n          Math.random() * (100000 - 10000) + 10000\r\n        ).toString();\r\n\r\n        //let user = optimizelyClient.createUserContext(userId, attributes);\r\n        let isFeatureEnabled = optimizelyClient.isFeatureEnabled(\r\n          featureKey,\r\n          userId,\r\n          attributes\r\n        );\r\n        console.log(isFeatureEnabled);\r\n        decisionArray.push({\r\n          userId: userId,\r\n          flagOrFeatureKey: featureKey,\r\n          flagState: isFeatureEnabled,\r\n        });\r\n      }\r\n      return decisionArray;\r\n    }\r\n  }\r\n\r\n  // RENDER RESULTS\r\n\r\n  if (allDecisions.length > 0) {\r\n    return (\r\n      <Typography variant='body1'>{JSON.stringify(allDecisions)}</Typography>\r\n    );\r\n  } else return <Typography>empty</Typography>;\r\n\r\n  function FlagsOffMessage({ projectId }) {\r\n    const navLink = `https://app.optimizely.com/v2/projects/${projectId}/settings/implementation`;\r\n    return (\r\n      <div>\r\n        <Pre>Flag was off for everyone. Some reasons could include:</Pre>\r\n        <Pre>\r\n          1. Your sample size of visitors was too small. Rerun, or increase the\r\n          iterations in the FOR loop\r\n        </Pre>\r\n        <Pre>\r\n          2. By default you have 2 keys for 2 project environments (dev/prod).\r\n          Verify in Settings then Environments that you used the right key for\r\n          the environment where your flag is toggled to ON.\r\n        </Pre>\r\n        <Pre>\r\n          Check your key at <a href={navLink}>{navLink}</a>\r\n        </Pre>\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default NewDecisionResults;\r\n","import React, { useState } from 'react';\r\n\r\n// components\r\nimport InputSettings from './InputSettings';\r\nimport DecisionResults from './DecisionResults';\r\nimport NewDecisionResults from './NewDecisionResults';\r\n\r\n// mui\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Container from '@mui/material/Container';\r\n\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\n\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n  ...theme.typography.body2,\r\n  padding: theme.spacing(1),\r\n  textAlign: 'center',\r\n  color: theme.palette.text.secondary,\r\n}));\r\n\r\nconst AppLayout = (props) => {\r\n  const [inputSettings, setInputSettings] = useState(null);\r\n  // Passed on props to InputSettings and passed up when submitted\r\n  const getInputSettings = (settings) => {\r\n    setInputSettings(settings);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Box sx={{ flexGrow: 1, height: '100vh' }}>\r\n        <AppBar position='static'>\r\n          <Toolbar>\r\n            <Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>\r\n              Flags Helper\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Item>\r\n          <InputSettings setInputSettings={setInputSettings} />\r\n        </Item>\r\n        <div>\r\n          {inputSettings ? (\r\n            <NewDecisionResults inputSettings={inputSettings} />\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n        </div>\r\n      </Box>\r\n      {/* <Box sx={{ flexGrow: 1, height: '100vh' }}>\r\n        <AppBar position='static'>\r\n          <Toolbar>\r\n            <Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>\r\n              Flags Helper\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <Grid container spacing={0}>\r\n          <Grid item xs={2}>\r\n            <Item>xs=2</Item>\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Item>\r\n              <ProjectSettings />\r\n            </Item>\r\n          </Grid>\r\n        </Grid>\r\n      </Box> */}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AppLayout;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport AppLayout from './components/AppLayout'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppLayout />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}